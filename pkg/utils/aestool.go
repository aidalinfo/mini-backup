package utils

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/hex"
	"errors"
	"fmt"
	"io"
	"os"
)

// readKeyFromFile lit une cl√© hexad√©cimale √† partir d'un fichier et retourne les bytes
func readKeyFromFile() ([]byte, error) {
	keyHex := GetEnv[string]("AES_KEY")
	// TODO get secret from infisical
	// D√©coder la cl√© hexad√©cimale
	key, err := hex.DecodeString(string(keyHex))
	if err != nil {
		logger.Error(fmt.Sprintf("Erreur lors du d√©codage hexad√©cimal de la cl√© : %v", err))
		return nil, fmt.Errorf("erreur lors du d√©codage hexad√©cimal de la cl√© : %v", err)
	}

	// V√©rifier la longueur de la cl√©
	if len(key) != 16 && len(key) != 24 && len(key) != 32 {
		logger.Error("La cl√© doit √™tre de 16, 24 ou 32 octets")
		return nil, errors.New("la cl√© doit √™tre de 16, 24 ou 32 octets")
	}
	logger.Debug(fmt.Sprintf("La cl√© est de longueur %d octets", len(key)))
	return key, nil
}

// encryptFile chiffre un fichier avec une cl√© AES
func EncryptFile(inputFile, outputFile string) error {
	// Lire le fichier en clair
	key, err := readKeyFromFile()
	if err != nil {
		return err
	}
	plainText, err := os.ReadFile(inputFile)
	if err != nil {
		logger.Error(fmt.Sprintf("Erreur lors de la lecture du fichier en clair : %v", err))
		return fmt.Errorf("erreur lors de la lecture du fichier en clair : %v", err)
	}

	// Cr√©er un bloc AES
	block, err := aes.NewCipher(key)
	if err != nil {
		logger.Error(fmt.Sprintf("Erreur lors de la cr√©ation du bloc AES : %v", err))
		return fmt.Errorf("erreur lors de la cr√©ation du bloc AES : %v", err)
	}

	// Cr√©er un nonce
	nonce := make([]byte, 12) // GCM recommande 12 octets pour le nonce
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		logger.Error(fmt.Sprintf("Erreur lors de la g√©n√©ration du nonce : %v", err))
		return fmt.Errorf("erreur lors de la g√©n√©ration du nonce : %v", err)
	}

	// Chiffrer avec AES-GCM
	aesGCM, err := cipher.NewGCM(block)
	if err != nil {
		logger.Error(fmt.Sprintf("Erreur lors de la cr√©ation de GCM : %v", err))
		return fmt.Errorf("erreur lors de la cr√©ation de GCM : %v", err)
	}

	cipherText := aesGCM.Seal(nil, nonce, plainText, nil)

	// Combiner nonce et texte chiffr√©
	finalData := append(nonce, cipherText...)

	// √âcrire les donn√©es chiffr√©es dans le fichier de sortie
	if err := os.WriteFile(outputFile, finalData, 0644); err != nil {
		logger.Error(fmt.Sprintf("Erreur lors de l'√©criture du fichier chiffr√© : %v", err))
		return fmt.Errorf("erreur lors de l'√©criture du fichier chiffr√© : %v", err)
	}
	logger.Debug(fmt.Sprintf("Fichier chiffr√© avec succ√®s : %s", outputFile))
	return nil
}

// decryptFile d√©chiffre un fichier avec une cl√© AES
func DecryptFile(inputFile, outputFile string) error {
	// Lire le fichier chiffr√©
	key, err := readKeyFromFile()
	if err != nil {
		return err
	}
	encryptedData, err := os.ReadFile(inputFile)
	if err != nil {
		return fmt.Errorf("erreur lors de la lecture du fichier chiffr√© : %v", err)
	}

	// Cr√©er un bloc AES
	block, err := aes.NewCipher(key)
	if err != nil {
		return fmt.Errorf("erreur lors de la cr√©ation du bloc AES : %v", err)
	}

	// Extraire le nonce et le texte chiffr√©
	nonceSize := 12
	if len(encryptedData) < nonceSize {
		return errors.New("donn√©es chiffr√©es trop courtes")
	}

	nonce, cipherText := encryptedData[:nonceSize], encryptedData[nonceSize:]

	// D√©chiffrer avec AES-GCM
	aesGCM, err := cipher.NewGCM(block)
	if err != nil {
		return fmt.Errorf("erreur lors de la cr√©ation de GCM : %v", err)
	}

	plainText, err := aesGCM.Open(nil, nonce, cipherText, nil)
	if err != nil {
		return fmt.Errorf("erreur lors du d√©chiffrement : %v", err)
	}

	// √âcrire les donn√©es en clair dans le fichier de sortie
	if err := os.WriteFile(outputFile, plainText, 0644); err != nil {
		return fmt.Errorf("erreur lors de l'√©criture du fichier en clair : %v", err)
	}

	return nil
}
// DecryptBytes d√©chiffre des donn√©es AES-GCM en m√©moire
func DecryptBytes(encryptedData []byte) ([]byte, error) {
	key, err := readKeyFromFile()
	if err != nil {
		return nil, err
	}

	logger.Info(fmt.Sprintf("üîê D√©but du d√©chiffrement - Taille chiffr√©e : %d octets", len(encryptedData)))

	nonceSize := 12
	if len(encryptedData) < nonceSize {
		logger.Error("‚ùå Donn√©es chiffr√©es trop courtes pour √™tre valides !")
		return nil, errors.New("donn√©es chiffr√©es trop courtes")
	}

	nonce, cipherText := encryptedData[:nonceSize], encryptedData[nonceSize:]

	block, err := aes.NewCipher(key)
	if err != nil {
		logger.Error(fmt.Sprintf("‚ùå Erreur lors de la cr√©ation du bloc AES : %v", err))
		return nil, fmt.Errorf("erreur lors de la cr√©ation du bloc AES : %v", err)
	}

	aesGCM, err := cipher.NewGCM(block)
	if err != nil {
		logger.Error(fmt.Sprintf("‚ùå Erreur lors de la cr√©ation de GCM : %v", err))
		return nil, fmt.Errorf("erreur lors de la cr√©ation de GCM : %v", err)
	}

	plainText, err := aesGCM.Open(nil, nonce, cipherText, nil)
	if err != nil {
		logger.Error(fmt.Sprintf("‚ùå Erreur lors du d√©chiffrement : %v", err))
		return nil, fmt.Errorf("erreur lors du d√©chiffrement : %v", err)
	}

	logger.Info(fmt.Sprintf("üîì D√©chiffrement r√©ussi ! Taille du fichier d√©chiffr√© : %d octets", len(plainText)))

	return plainText, nil
}
